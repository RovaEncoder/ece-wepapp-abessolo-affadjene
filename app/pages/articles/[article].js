import { useUser } from "@supabase/auth-helpers-react";
import Head from "next/head";
import Link from "next/link";
import React, { useEffect, useState } from "react";
import { BiSend } from "react-icons/bi";
import formateDate from "../../functions/formatDate";
import Layout from "../../layout/layout";
import { supabase } from "../../utils/supabase";

export default function Article({ currentArticle, articles }) {
	const currentUser = useUser();
	const [comments, setComments] = useState(
		currentArticle.comments_view.reverse()
	);
	console.log("Comments de chez comments !", comments);

	// currentArticle.comments_view.reverse();

	useEffect(() => {
		const comment = supabase
			.channel("comments")
			.on(
				"postgres_changes",
				{ event: "*", schema: "public", table: "comments" },
				async (payload) => {
					const { data: newComment } = await supabase
						.from("comments_view")
						.select("*")
						.eq("id", payload.new.id)
						.single();

					setComments([newComment, ...comments]);
				}
			)
			.subscribe();

		return () => comment.unsubscribe();
	}, [currentArticle]);

	const createdDate = formateDate(currentArticle.created_at);

	async function handleSubmit(event) {
		event.preventDefault();

		const body = {
			content: event.target.addcomment.value,
			article_id: currentArticle.id,
			user_id: currentUser.id,
		};

		const { error } = await supabase.from("comments").insert(body);

		if (error) {
			throw new Error(error.message);
		}

		// setComments([body, ...comments]);
	}
	return (
		<>
			<Head>
				<title>Blog</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<Layout>
				<div className="container-article">
					<div className="article-div">
						<div className="author-left">
							<img
								src={currentArticle.profiles.avatar_url}
								className="rounded-sm object-cover"
								width="50px"
								height="50px"
								layout="responsive"
							/>
							<div className="flex column ml10 infos-author">
								<span>{currentArticle.profiles.full_name}</span>
								<span className="text-sky-500">{createdDate}</span>
							</div>
						</div>
						<div className="article-img">
							<h2 className="mt30 mb30">{currentArticle.title}</h2>
							<img src={currentArticle.imageUrl} layout="responsive" />
						</div>
						<div className="article-itself">
							<h3>{currentArticle.description}</h3>
							<div className="article-section">
								<p>{currentArticle.body}</p>
							</div>
						</div>
						<div className="add-comment">
							<div>
								<img src="" />
							</div>
							<form onSubmit={handleSubmit} className="form-comment">
								<textarea
									type="text"
									name="addcomment"
									placeholder="Ajouter un commentaire..."
								/>
								<button className="send-comment">
									<BiSend size={30} />
								</button>
							</form>
						</div>
						<div className="comments">
							{comments.map((comment) => (
								<div className="mb20 each-comment">
									<div className="comment-img">
										<img src={comment.avatar_author} layout="responsive" />
										<span className="ml20">{comment.name_author}</span>
									</div>
									<div className="mt10">{comment.content}</div>
								</div>
							))}
						</div>
					</div>
					<div className="user-div">
						<div className="mb50">
							<div className="user-right-img">
								<img
									src={currentArticle.profiles.avatar_url}
									layout="responsive"
								/>
								<span className="ml20 text-sky-500">
									{currentArticle.profiles.full_name}
								</span>
							</div>
							<div className="mt20 ">{currentArticle.profiles.description}</div>
						</div>
						<span>DÃ©couvrir plus</span>
						{articles.map((article) => (
							<Link href={`/articles/${article.id}#top`}>
								<div
									key={article.id}
									className="other-post flex space-between mt10"
								>
									<div className="col-9-sm">
										<div className="flex gap items-center">
											<img
												src={article.avatar_author}
												className="rounded-sm object-cover border-radius"
												width="30px"
												height="30px"
												layout="responsive"
											/>
											<small className="text-sky-500">
												{article.name_author}
											</small>
										</div>
										<h3>{article.description.slice(0, 50) + "..."}</h3>
									</div>
									<div>
										<img
											src={article.imageUrl}
											className="rounded-sm object-cover"
											width="100px"
											height="100px"
											layout="responsive"
										/>
									</div>
								</div>
							</Link>
						))}
					</div>
				</div>
			</Layout>
		</>
	);
}

export async function getServerSideProps({ params }) {
	const { data: currentArticle, error1 } = await supabase
		.from("articles")
		.select("*, comments_view(*), profiles(*)")
		.eq("id", params.article)
		.single();

	const { data: articles, error2 } = await supabase
		.from("random_articles_view")
		.select("*")
		.limit(3);

	if (error1) {
		throw new Error("Error 1");
	}
	if (error2) {
		throw new Error("Error 2");
	}

	return {
		props: {
			currentArticle,
			articles,
		},
	};
}
